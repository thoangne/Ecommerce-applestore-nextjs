generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  password         String
  name             String?
  role             String             @default("user")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  address          String?
  phone            String?
  isActive         Boolean            @default(true)
  lastLogin        DateTime?
  activityLogs     ActivityLog[]
  Feedback         Feedback[]
  InventoryHistory InventoryHistory[]
  Notification     Notification[]
  orders           Order[]
  promotions       PromotionUsage[]
  reviews          Review[]
}

model Category {
  id            String     @id @default(cuid())
  name          String
  slug          String     @unique
  parentId      String?
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("Subcategories")
  products      Product[]
}

model Product {
  id               String             @id @default(cuid())
  name             String
  description      String?
  categoryId       String?
  slug             String             @unique
  price            Int
  inventory        Int                @default(0)
  color            String?
  createdAt        DateTime           @default(now())
  releasedAt       DateTime?
  specs            Json?
  storage          String?
  updatedAt        DateTime           @updatedAt
  images           String[]
  CartItem         CartItem[]
  InventoryHistory InventoryHistory[]
  orderItem        OrderItem[]
  Category         Category?          @relation(fields: [categoryId], references: [slug])
  reviews          Review[]
  promotions       Promotion[]        @relation("ProductToPromotion")
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  productId String
  cartId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id                    String           @id @default(cuid())
  total                 Float
  stripeSessionId       String?
  stripePaymentIntentId String?
  status                String           @default("PENDING")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  userId                String?
  promotionId           String?
  usedPromotionId       String?
  Promotion             Promotion?       @relation(fields: [promotionId], references: [id])
  usedPromotion         Promotion?       @relation("OrderPromotion", fields: [usedPromotionId], references: [id])
  user                  User?            @relation(fields: [userId], references: [id])
  items                 OrderItem[]
  Payment               Payment[]
  PromotionUsage        PromotionUsage[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int      @default(5)
  productId String
  userId    String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Promotion {
  id            String           @id @default(cuid())
  code          String           @unique
  description   String?
  discountType  String
  discountValue Float
  startDate     DateTime
  endDate       DateTime
  minOrder      Float?
  usageLimit    Int?
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  Order         Order[]
  ordersUsed    Order[]          @relation("OrderPromotion")
  usersUsed     PromotionUsage[]
  products      Product[]        @relation("ProductToPromotion")
}

model PromotionUsage {
  id          String    @id @default(cuid())
  userId      String
  promotionId String
  usedAt      DateTime  @default(now())
  orderId     String?
  order       Order?    @relation(fields: [orderId], references: [id])
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model InventoryHistory {
  id        String   @id @default(cuid())
  productId String
  change    Int
  reason    String?
  userId    String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  createdBy User?    @relation(fields: [userId], references: [id])
}

model Payment {
  id            String    @id @default(cuid())
  orderId       String
  amount        Float
  method        String
  status        String    @default("PENDING")
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  order         Order     @relation(fields: [orderId], references: [id])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  targetId  String?
  details   String?
  ipAddress String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String?
  message   String
  type      String   @default("general")
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  title     String
  message   String
  type      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model DashboardStat {
  id           String   @id @default(cuid())
  date         DateTime
  totalOrders  Int
  totalRevenue Float
  newUsers     Int
  createdAt    DateTime @default(now())
}
